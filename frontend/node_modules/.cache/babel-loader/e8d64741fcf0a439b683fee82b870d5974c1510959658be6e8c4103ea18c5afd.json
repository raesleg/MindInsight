{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2459n\\\\OneDrive\\\\Documents\\\\Personal\\\\MindInsight\\\\MindInsight\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport { Recorder } from 'react-voice-recorder';\nimport 'react-voice-recorder/dist/index.css';\nimport axios from 'axios';\n\n// const assemblyApi = axios.create({\n//   baseURL: 'https://api.assemblyai.com/v2',\n//   headers: {\n//     authorization: process.env.REACT_APP_ASSEMBLY_API_KEY,\n//     'content-type': 'application/json',\n//   },\n// });\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  url: null,\n  blob: null,\n  chunks: null,\n  duration: {\n    h: 0,\n    m: 0,\n    s: 0\n  }\n};\nfunction App() {\n  _s();\n  const [audioDetails, setAudioDetails] = useState(initialState);\n  const [transcript, setTranscript] = useState({\n    id: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [sResults, setSResults] = useState([]);\n  const [kResults, setKResults] = useState([]);\n  const [plotUrl, setPlotUrl] = useState('');\n  const handleAudioStop = data => {\n    setAudioDetails(data);\n  };\n  const handleReset = () => {\n    setAudioDetails({\n      ...initialState\n    });\n    setTranscript({\n      id: ''\n    });\n  };\n\n  // const handleAudioUpload = async (audioFile) => {\n  //   setIsLoading(true);\n\n  //   const {data: uploadResponse} = await assemblyApi.post('/upload',audioFile);\n\n  //   const {data} = await assemblyApi.post('/transcript', {\n  //     audio_url: uploadResponse.upload_url,\n  //     sentiment_analysis: true,\n  //     entity_detection: true,\n  //     iab_categories: true,\n  //   });\n\n  //   setTranscript({ id: data.id });\n  // }\n\n  const handleFileUpload = async event => {\n    event.preventDefault();\n\n    // Assuming you have a reference to the form\n    const form = new FormData(event.target);\n    try {\n      // Make a POST request to your Flask server\n      const response = await fetch('http://localhost:5000/data', {\n        method: 'POST',\n        body: form\n      });\n      const data = await response.json();\n\n      // Update state with the data received from the server\n      setTranscript(data.transcript);\n      setSResults(data.s_results);\n      setKResults(data.k_results);\n      setPlotUrl(data.plotUrl);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"uploadContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Upload new File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleFileUpload,\n        encType: \"multipart/form-data\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"file\",\n          id: \"fileButton\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Transcribe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"y1QMe76/UsXuiHDXJHj007Y3PLY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Recorder","axios","jsxDEV","_jsxDEV","initialState","url","blob","chunks","duration","h","m","s","App","_s","audioDetails","setAudioDetails","transcript","setTranscript","id","isLoading","setIsLoading","sResults","setSResults","kResults","setKResults","plotUrl","setPlotUrl","handleAudioStop","data","handleReset","handleFileUpload","event","preventDefault","form","FormData","target","response","fetch","method","body","json","s_results","k_results","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","encType","type","name","_c","$RefreshReg$"],"sources":["C:/Users/2459n/OneDrive/Documents/Personal/MindInsight/MindInsight/frontend/src/App.js"],"sourcesContent":["import './App.css';\r\nimport { useState, useEffect } from 'react';\r\nimport { Recorder } from 'react-voice-recorder';\r\nimport 'react-voice-recorder/dist/index.css';\r\nimport axios from 'axios';\r\n\r\n// const assemblyApi = axios.create({\r\n//   baseURL: 'https://api.assemblyai.com/v2',\r\n//   headers: {\r\n//     authorization: process.env.REACT_APP_ASSEMBLY_API_KEY,\r\n//     'content-type': 'application/json',\r\n//   },\r\n// });\r\n\r\nconst initialState = {\r\n  url: null,\r\n  blob: null,\r\n  chunks: null,\r\n  duration: {\r\n    h:0,\r\n    m:0,\r\n    s:0\r\n  },\r\n}\r\n\r\nfunction App() {\r\n  const [audioDetails, setAudioDetails] = useState(initialState);\r\n  const [transcript, setTranscript] = useState({ id: ''});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [sResults, setSResults] = useState([]);\r\n  const [kResults, setKResults] = useState([]);\r\n  const [plotUrl, setPlotUrl] = useState('');\r\n\r\n  const handleAudioStop = (data) => {\r\n    setAudioDetails(data);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setAudioDetails({...initialState});\r\n    setTranscript({ id: ''})\r\n  }\r\n\r\n  // const handleAudioUpload = async (audioFile) => {\r\n  //   setIsLoading(true);\r\n\r\n  //   const {data: uploadResponse} = await assemblyApi.post('/upload',audioFile);\r\n\r\n  //   const {data} = await assemblyApi.post('/transcript', {\r\n  //     audio_url: uploadResponse.upload_url,\r\n  //     sentiment_analysis: true,\r\n  //     entity_detection: true,\r\n  //     iab_categories: true,\r\n  //   });\r\n\r\n  //   setTranscript({ id: data.id });\r\n  // }\r\n\r\n  const handleFileUpload = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // Assuming you have a reference to the form\r\n    const form = new FormData(event.target);\r\n\r\n    try {\r\n      // Make a POST request to your Flask server\r\n      const response = await fetch('http://localhost:5000/data', {\r\n        method: 'POST',\r\n        body: form,\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      // Update state with the data received from the server\r\n      setTranscript(data.transcript);\r\n      setSResults(data.s_results);\r\n      setKResults(data.k_results);\r\n      setPlotUrl(data.plotUrl);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"uploadContainer\">\r\n        <h1>Upload new File</h1>\r\n        <form onSubmit={handleFileUpload} encType=\"multipart/form-data\">\r\n          <input type=\"file\" name=\"file\" id=\"fileButton\" />\r\n          <br />\r\n          <button type=\"submit\">Transcribe</button>\r\n        </form>\r\n      </div>\r\n      {/* Rest of your React component */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}