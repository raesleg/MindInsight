{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\2459n\\\\OneDrive\\\\Documents\\\\Personal\\\\MindInsight\\\\MindInsight\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport { Recorder } from 'react-voice-recorder';\nimport 'react-voice-recorder/dist/index.css';\nimport axios from 'axios';\n\n// const assemblyApi = axios.create({\n//   baseURL: 'https://api.assemblyai.com/v2',\n//   headers: {\n//     authorization: process.env.REACT_APP_ASSEMBLY_API_KEY,\n//     'content-type': 'application/json',\n//   },\n// });\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  url: null,\n  blob: null,\n  chunks: null,\n  duration: {\n    h: 0,\n    m: 0,\n    s: 0\n  }\n};\nfunction App() {\n  _s();\n  const [audioDetails, setAudioDetails] = useState(initialState);\n  const [transcript, setTranscript] = useState({\n    id: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [file, setFile] = useState(null);\n  const [sResults, setSResults] = useState([]);\n  const [kResults, setKResults] = useState([]);\n  const [plotUrl, setPlotUrl] = useState('');\n  const handleAudioStop = data => {\n    setAudioDetails(data);\n  };\n  const handleReset = () => {\n    setAudioDetails({\n      ...initialState\n    });\n    setTranscript({\n      id: ''\n    });\n  };\n\n  // const handleAudioUpload = async (audioFile) => {\n  //   setIsLoading(true);\n\n  //   const {data: uploadResponse} = await assemblyApi.post('/upload',audioFile);\n\n  //   const {data} = await assemblyApi.post('/transcript', {\n  //     audio_url: uploadResponse.upload_url,\n  //     sentiment_analysis: true,\n  //     entity_detection: true,\n  //     iab_categories: true,\n  //   });\n\n  //   setTranscript({ id: data.id });\n  // }\n\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleUpload = async () => {\n    if (!file) {\n      alert('Please select a file.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await fetch('http://localhost:5000/data', {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setTranscript(data.transcript);\n        setSResults(data.s_results);\n        setKResults(data.k_results);\n        setPlotUrl(data.plotUrl);\n      } else {\n        alert('Error uploading file.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"uploadContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Upload new File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        children: \"Transcribe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), \"Display the results only if data is available /*\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"37wUXUcPLDo0a+XxX3OevS5p1UE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Recorder","axios","jsxDEV","_jsxDEV","initialState","url","blob","chunks","duration","h","m","s","App","_s","audioDetails","setAudioDetails","transcript","setTranscript","id","isLoading","setIsLoading","file","setFile","sResults","setSResults","kResults","setKResults","plotUrl","setPlotUrl","handleAudioStop","data","handleReset","handleFileChange","event","target","files","handleUpload","alert","formData","FormData","append","response","fetch","method","body","ok","json","s_results","k_results","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/2459n/OneDrive/Documents/Personal/MindInsight/MindInsight/frontend/src/App.js"],"sourcesContent":["import './App.css';\r\nimport { useState, useEffect } from 'react';\r\nimport { Recorder } from 'react-voice-recorder';\r\nimport 'react-voice-recorder/dist/index.css';\r\nimport axios from 'axios';\r\n\r\n// const assemblyApi = axios.create({\r\n//   baseURL: 'https://api.assemblyai.com/v2',\r\n//   headers: {\r\n//     authorization: process.env.REACT_APP_ASSEMBLY_API_KEY,\r\n//     'content-type': 'application/json',\r\n//   },\r\n// });\r\n\r\nconst initialState = {\r\n  url: null,\r\n  blob: null,\r\n  chunks: null,\r\n  duration: {\r\n    h:0,\r\n    m:0,\r\n    s:0\r\n  },\r\n}\r\n\r\nfunction App() {\r\n  const [audioDetails, setAudioDetails] = useState(initialState);\r\n  const [transcript, setTranscript] = useState({ id: ''});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [file, setFile] = useState(null);\r\n  const [sResults, setSResults] = useState([]);\r\n  const [kResults, setKResults] = useState([]);\r\n  const [plotUrl, setPlotUrl] = useState('');\r\n\r\n  const handleAudioStop = (data) => {\r\n    setAudioDetails(data);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setAudioDetails({...initialState});\r\n    setTranscript({ id: ''})\r\n  }\r\n\r\n  // const handleAudioUpload = async (audioFile) => {\r\n  //   setIsLoading(true);\r\n\r\n  //   const {data: uploadResponse} = await assemblyApi.post('/upload',audioFile);\r\n\r\n  //   const {data} = await assemblyApi.post('/transcript', {\r\n  //     audio_url: uploadResponse.upload_url,\r\n  //     sentiment_analysis: true,\r\n  //     entity_detection: true,\r\n  //     iab_categories: true,\r\n  //   });\r\n\r\n  //   setTranscript({ id: data.id });\r\n  // }\r\n\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!file) {\r\n      alert('Please select a file.');\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/data', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setTranscript(data.transcript);\r\n        setSResults(data.s_results);\r\n        setKResults(data.k_results);\r\n        setPlotUrl(data.plotUrl);\r\n      } else {\r\n        alert('Error uploading file.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div id=\"uploadContainer\">\r\n        <h1>Upload new File</h1>\r\n        <input type=\"file\" onChange={handleFileChange} />\r\n        <br />\r\n        <button onClick={handleUpload}>Transcribe</button>\r\n      </div>\r\n\r\n       Display the results only if data is available\r\n      /*{/* {transcript && (\r\n        <div id=\"audioContainer\" className=\"right\">\r\n          <div id=\"speechTranscriptContainer\">\r\n            <h1>Transcript</h1>\r\n            <p className=\"resultst\">{transcript}</p>\r\n          </div>\r\n          {sResults.length > 0 && (\r\n            <div id=\"SentimentContainer\">\r\n              <h1>Sentiment Analysis Results</h1>\r\n              {sResults.map((result, index) => (\r\n                <p key={index} className=\"results\">{result}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {kResults.length > 0 && (\r\n            <div id=\"KeywordContainer\">\r\n              <h1>Word highlight Results</h1>\r\n              {kResults.map((result, index) => (\r\n                <p key={index} className=\"results\">{result}</p>\r\n              ))}\r\n            </div>\r\n          )}\r\n      </div>\r\n    )}\r\n\r\n    {plotUrl && (\r\n      <div id=\"PlotContainer\" className=\"right\">\r\n        <h1 id=\"plotH1\">Audio Waves</h1>\r\n        <img id=\"plotWave\" src={`data:image/png;base64, ${plotUrl}`} width=\"85%\" height=\"100%\" alt=\"Plot\" />\r\n      </div>\r\n    )} */}\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,OAAO,qCAAqC;AAC5C,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,YAAY,GAAG;EACnBC,GAAG,EAAE,IAAI;EACTC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,IAAI;EACZC,QAAQ,EAAE;IACRC,CAAC,EAAC,CAAC;IACHC,CAAC,EAAC,CAAC;IACHC,CAAC,EAAC;EACJ;AACF,CAAC;AAED,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAACM,YAAY,CAAC;EAC9D,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGnB,QAAQ,CAAC;IAAEoB,EAAE,EAAE;EAAE,CAAC,CAAC;EACvD,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACuB,IAAI,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACyB,QAAQ,EAAEC,WAAW,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC2B,QAAQ,EAAEC,WAAW,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC6B,OAAO,EAAEC,UAAU,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAM+B,eAAe,GAAIC,IAAI,IAAK;IAChCf,eAAe,CAACe,IAAI,CAAC;EACvB,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBhB,eAAe,CAAC;MAAC,GAAGX;IAAY,CAAC,CAAC;IAClCa,aAAa,CAAC;MAAEC,EAAE,EAAE;IAAE,CAAC,CAAC;EAC1B,CAAC;;EAED;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,MAAMc,gBAAgB,GAAIC,KAAK,IAAK;IAClCX,OAAO,CAACW,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACf,IAAI,EAAE;MACTgB,KAAK,CAAC,uBAAuB,CAAC;MAC9B;IACF;IAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEnB,IAAI,CAAC;IAE7B,IAAI;MACF,MAAMoB,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;QACzDC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEN;MACR,CAAC,CAAC;MAEF,IAAIG,QAAQ,CAACI,EAAE,EAAE;QACf,MAAMf,IAAI,GAAG,MAAMW,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClC7B,aAAa,CAACa,IAAI,CAACd,UAAU,CAAC;QAC9BQ,WAAW,CAACM,IAAI,CAACiB,SAAS,CAAC;QAC3BrB,WAAW,CAACI,IAAI,CAACkB,SAAS,CAAC;QAC3BpB,UAAU,CAACE,IAAI,CAACH,OAAO,CAAC;MAC1B,CAAC,MAAM;QACLU,KAAK,CAAC,uBAAuB,CAAC;MAChC;IACF,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC;EACF,CAAC;EAED,oBACE9C,OAAA;IAAAgD,QAAA,gBACEhD,OAAA;MAAKe,EAAE,EAAC,iBAAiB;MAAAiC,QAAA,gBACvBhD,OAAA;QAAAgD,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBpD,OAAA;QAAOqD,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAEzB;MAAiB;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjDpD,OAAA;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACNpD,OAAA;QAAQuD,OAAO,EAAEtB,YAAa;QAAAe,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC,oDAGJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OA+BD,CAAC;AAER;AAAC1C,EAAA,CA7GQD,GAAG;AAAA+C,EAAA,GAAH/C,GAAG;AA+GZ,eAAeA,GAAG;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}